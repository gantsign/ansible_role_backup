import os

import testinfra.utils.ansible_runner

testinfra_hosts = testinfra.utils.ansible_runner.AnsibleRunner(
    os.environ['MOLECULE_INVENTORY_FILE']).get_hosts('all')


def test_backup_script_dir(host):
    dir = host.file('/home/test_usr1/.backup')
    assert dir.exists
    assert dir.is_directory
    assert dir.user == 'test_usr1'
    assert dir.group in ['test_usr1', 'users']


def test_backup_script(host):
    installed_file = host.file('/home/test_usr1/.backup/backup.sh')
    assert installed_file.exists
    assert installed_file.is_file
    assert installed_file.user == 'test_usr1'
    assert installed_file.group in ['test_usr1', 'users']
    assert installed_file.content_string.strip() == r'''
#!/bin/bash

PATH=/sbin:/usr/sbin:/bin:/usr/bin

script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"

backup_args=('--delete')
flock_args=('--exclusive')
verbosity_args=('--verbose' '--stats' '--human-readable')
src=/home/test_usr1/
dest=/tmp/backup/
dirs=("$src" "$dest")

for i in "$@"; do
    case $i in
        --quiet)
            verbosity_args=('--quiet')
            shift
        ;;
        --stats-only)
            verbosity_args=('--stats' '--human-readable')
            shift
        ;;
        --nonblock)
            flock_args+=('--nonblock' '--conflict-exit-code=0')
            shift
        ;;
        --restore)
            backup_args=()
            dirs=("$dest" "$src")
            shift
        ;;
        *)
            shift
        ;;
    esac
done

flock "${flock_args[@]}" "$script_dir/backup-impl.sh" bash \
    "$script_dir/backup-impl.sh" \
    "${backup_args[@]}" "${verbosity_args[@]}" "${dirs[@]}"
'''.strip()


def test_backup_impl_script(host):
    installed_file = host.file('/home/test_usr1/.backup/backup-impl.sh')
    assert installed_file.exists
    assert installed_file.is_file
    assert installed_file.user == 'test_usr1'
    assert installed_file.group in ['test_usr1', 'users']
    assert installed_file.content_string.strip() == r'''
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"

rsync \
  --recursive \
  --safe-links \
  --perms \
  --times \
  --filter="merge $script_dir/rsync-filter" \
  "$@"
'''.strip()


def test_rsync_filter(host):
    installed_file = host.file('/home/test_usr1/.backup/rsync-filter')
    assert installed_file.exists
    assert installed_file.is_file
    assert installed_file.user == 'test_usr1'
    assert installed_file.group in ['test_usr1', 'users']
    assert installed_file.content_string.strip() == r'''
#
# Ansible managed: Do NOT edit this file manually!
#
!
+ /includeme
- /*
'''.strip()


def test_service(host):
    installed_file = host.file('/etc/systemd/system/backup.service')
    assert installed_file.exists
    assert installed_file.is_file
    assert installed_file.user == 'root'
    assert installed_file.group == 'root'
    assert installed_file.content_string.strip() == r'''
#
# Ansible managed: Do NOT edit this file manually!
#

[Unit]
Description=rsync backup script
Requires=local-fs.target
After=local-fs.target

[Service]
Type=oneshot
RemainAfterExit=true
ExecStart=/bin/true
ExecStop=/bin/bash -c '~/.backup/backup.sh --quiet'
User=vagrant

[Install]
WantedBy=multi-user.target
'''.strip()


def test_cron(host):
    installed_file = host.file('/etc/cron.d/backup')
    assert installed_file.exists
    assert installed_file.is_file
    assert installed_file.user == 'root'
    assert installed_file.group == 'root'
    assert installed_file.content_string.strip() == r'''
#Ansible: backup
*/5 * * * * test_usr1 /bin/bash -c '~/.backup/backup.sh --quiet --nonblock'
'''.strip()


def test_includeme(host):
    installed_file = host.file('/home/test_usr1/includeme')
    assert installed_file.exists
    assert installed_file.is_file
    assert installed_file.user == 'test_usr1'
    assert installed_file.group in ['test_usr1', 'users']
    assert installed_file.content_string.strip() == 'test'


def test_excludeme(host):
    installed_file = host.file('/home/test_usr1/excludeme')
    assert not installed_file.exists
